name: Electron App Build & Release

on:
  push:
    tags: [ 'app-v*' ]  # 只在创建 app-v* 标签时触发

env:
  NODE_VERSION: '14'

jobs:
  # 代码质量检查
  quality-check:
    name: Frontend Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run lint (if available)
      run: npm run lint || echo "No lint script found"
      continue-on-error: true

    - name: Check for security vulnerabilities
      run: npm audit --audit-level=moderate || echo "Audit completed with issues"
      continue-on-error: true

  # 构建 Electron 应用
  build:
    name: Build Electron App
    needs: quality-check
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            ext: .exe
          - os: macos-latest
            platform: darwin
            arch: x64
            ext: .dmg
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: .AppImage

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build renderer process
      run: npm run build:renderer || npm run build || echo "No build script found"
      env:
        VUE_APP_API_BASE_URL: ${{ vars.VUE_APP_API_BASE_URL }}

    - name: Build Electron app
      run: npm run build:electron || npm run electron:build || echo "Building with basic electron-builder"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VUE_APP_API_BASE_URL: ${{ vars.VUE_APP_API_BASE_URL }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-app-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          dist/
          build/
          out/
        retention-days: 7

  # 创建发布版本
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/app-v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get release version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/app-}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Subscription Manager ${{ steps.version.outputs.version }}
        body: |
          ## 🎉 Subscription Manager ${{ steps.version.outputs.version }}
          
          ### 📥 Downloads
          
          Choose the appropriate version for your operating system:
          
          - **Windows**: `subscription-manager-${{ steps.version.outputs.version }}-win32-x64.exe`
          - **macOS**: `subscription-manager-${{ steps.version.outputs.version }}-darwin-x64.dmg`
          - **Linux**: `subscription-manager-${{ steps.version.outputs.version }}-linux-x64.AppImage`
          
          ### ✨ Features
          
          - 订阅管理功能
          - 本地数据存储
          - 云同步支持（需要后端服务）
          - 跨平台支持
          
          ### 🔧 Installation
          
          1. Download the appropriate file for your OS
          2. Run the installer (Windows/macOS) or make executable and run (Linux)
          3. Follow the setup wizard
          
          ### 📚 Documentation
          
          See the [User Guide](USER_GUIDE.md) for detailed usage instructions.
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/app-v1.0.0...${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/electron-app-win32-x64/
        asset_name: subscription-manager-${{ steps.version.outputs.version }}-win32-x64.exe
        asset_content_type: application/octet-stream
      continue-on-error: true

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/electron-app-darwin-x64/
        asset_name: subscription-manager-${{ steps.version.outputs.version }}-darwin-x64.dmg
        asset_content_type: application/octet-stream
      continue-on-error: true

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/electron-app-linux-x64/
        asset_name: subscription-manager-${{ steps.version.outputs.version }}-linux-x64.AppImage
        asset_content_type: application/octet-stream
      continue-on-error: true

  # 自动更新检查 - 只在主分支推送时运行，现在移除
  # update-check 和 deploy-test job 已移除，因为现在只在 tag 时触发

  # 通知
  notify:
    name: Notify Build Status
    needs: [quality-check, build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
          echo "❌ Build failed"
          # 可以发送失败通知到 Slack、邮件等
        else
          echo "✅ Build successful"
          # 可以发送成功通知
        fi
        
        echo "## 📱 Electron App Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Ref**: \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Actor**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
