version: '3.8'

services:
  # PostgreSQL 数据库
  db:
    image: postgres:15-alpine
    container_name: subscription-db
    environment:
      POSTGRES_DB: subscription_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-subscription_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - subscription-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js 后端服务
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: subscription-api
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-subscription_password}
      DB_NAME: subscription_manager
      DB_PORT: 5432
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      PORT: 3000
    ports:
      - "${API_PORT:-3000}:3000"
    networks:
      - subscription-network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: subscription-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - subscription-network
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local

networks:
  subscription-network:
    driver: bridge
